import pytest
import asyncio
import tempfile
import os
from unittest.mock import Mock, patch, AsyncMock
from aiogram import Bot, Dispatcher
from aiogram.types import Message, User, Chat

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
os.environ['TELEGRAM_BOT_TOKEN'] = '123456789:TEST_FAKE_TOKEN_FOR_UNITTESTS'

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–æ–∫ kafka –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å Python 3.11
import sys
kafka_mock = Mock()
kafka_errors_mock = Mock()
kafka_errors_mock.NoBrokersAvailable = Exception
kafka_mock.errors = kafka_errors_mock
kafka_mock.KafkaConsumer = Mock()
sys.modules['kafka'] = kafka_mock
sys.modules['kafka.errors'] = kafka_errors_mock
sys.modules['kafka.consumer'] = Mock()

@pytest.fixture
def event_loop():
    """–°–æ–∑–¥–∞–µ—Ç event loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    loop = asyncio.new_event_loop()
    yield loop
    loop.close()


@pytest.fixture
def temp_subscribers_file():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏"""
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt') as f:
        f.write("123456789\n987654321\n")
        temp_file = f.name
    
    yield temp_file
    
    if os.path.exists(temp_file):
        os.unlink(temp_file)


@pytest.fixture
def mock_message():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
    message = Mock(spec=Message)
    message.from_user = Mock(spec=User)
    message.from_user.id = 123456789
    message.text = "üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    message.answer = AsyncMock()
    return message


@pytest.fixture
def mock_bot():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –±–æ—Ç–∞"""
    bot_mock = Mock(spec=Bot)
    bot_mock.send_message = AsyncMock()
    return bot_mock


@pytest.fixture
def mock_kafka_consumer():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ Kafka consumer"""
    consumer_mock = Mock()
    consumer_mock.poll = Mock(return_value={})
    consumer_mock.close = Mock()
    return consumer_mock


@pytest.fixture
def sample_kafka_message():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Kafka"""
    return {
        'action': 'INSERT',
        'table': 'promo_category',
        'data': {
            'name': '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
            'id': 1
        }
    }


@pytest.fixture
def sample_kafka_message_update():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ Kafka"""
    return {
        'action': 'UPDATE',
        'table': 'promo_offer',
        'data': {
            'title': '–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
            'id': 1
        },
        'dataOld': {
            'title': '–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
            'id': 1
        }
    }


@pytest.fixture
def sample_kafka_message_delete():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Kafka"""
    return {
        'action': 'DELETE',
        'table': 'promo_city',
        'data': {
            'name': '–£–¥–∞–ª–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥',
            'id': 1
        }
    } 