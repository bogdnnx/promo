import json
import asyncio
import time
from kafka import KafkaConsumer
from kafka.errors import NoBrokersAvailable
from aiogram import Bot
from tg_bot.config import TELEGRAM_BOT_TOKEN


class TelegramKafkaConsumer:
    def __init__(self, subscribed_users):
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        self.subscribed_users = subscribed_users
        print(f"–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {self.subscribed_users}")

        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka...")
        self.consumer = self._connect_to_kafka()
        print("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _connect_to_kafka(self, max_retries=30, retry_delay=1):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                print(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})...")
                consumer = KafkaConsumer(
                    'wal_listener.promo_categories',
                    'wal_listener.promo_offers',
                    bootstrap_servers='kafka:9092',
                    auto_offset_reset='latest',
                    enable_auto_commit=True,
                    group_id='telegram_bot_group',
                    value_deserializer=lambda x: json.loads(x.decode('utf-8'))
                )
                print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka!")
                return consumer
            except NoBrokersAvailable:
                if attempt < max_retries - 1:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Kafka. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(retry_delay)
                else:
                    print("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka")
                    raise

    async def format_message(self, message):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram"""
        print(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.value}")
        data = message.value
        action = data['action']
        table = data['table']

        print(f"–î–µ–π—Å—Ç–≤–∏–µ: {action}, –¢–∞–±–ª–∏—Ü–∞: {table}")

        if table == 'promo_category':
            if action == 'INSERT':
                return f"üÜï –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {data['data']['name']}"
            elif action == 'UPDATE':
                return f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {data['data']['name']}"
            elif action == 'DELETE':
                return f"‚ùå –£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {data['data']['name']}"

        elif table == 'promo_offer':
            if action == 'INSERT':
                return f"üÜï –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {data['data']['title']}"
            elif action == 'UPDATE':
                return f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {data['data']['title']}"
            elif action == 'DELETE':
                return f"‚ùå –£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {data['data']['title']}"

        # elif table == 'promo_city':
        #     if action == 'INSERT':
        #         return f"üèôÔ∏è –ù–æ–≤—ã–π –≥–æ—Ä–æ–¥: {data['data']['name']}"
        #     elif action == 'UPDATE':
        #         return f"üìù –û–±–Ω–æ–≤–ª–µ–Ω –≥–æ—Ä–æ–¥: {data['data']['name']}"
        #     elif action == 'DELETE':
        #         return f"‚ùå –£–¥–∞–ª–µ–Ω –≥–æ—Ä–æ–¥: {data['data']['name']}"
        #
        # elif table == 'promo_partner':
        #     if action == 'INSERT':
        #         return f"ü§ù –ù–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä: {data['data']['name']}"
        #     elif action == 'UPDATE':
        #         return f"üìù –û–±–Ω–æ–≤–ª–µ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä: {data['data']['name']}"
        #     elif action == 'DELETE':
        #         return f"‚ùå –£–¥–∞–ª–µ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä: {data['data']['name']}"


        return f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ {table}: {action}"

    async def process_messages(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka"""
        print("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka...")
        print(f"–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {self.subscribed_users}")

        try:
            print("–û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Kafka...")
            while True:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Kafka
                messages = self.consumer.poll(timeout_ms=1000)

                for tp, msgs in messages.items():
                    print(f"–ü–æ–ª—É—á–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–æ–ø–∏–∫–∞ {tp.topic}")
                    for message in msgs:
                        print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.value}")
                        formatted_message = await self.format_message(message)
                        print(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {formatted_message}")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                        for user_id in self.subscribed_users:
                            try:
                                await self.bot.send_message(user_id, formatted_message)
                                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

                # –î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥—Ä—É–≥–∏–º –∑–∞–¥–∞—á–∞–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
                await asyncio.sleep(0.1)

        except asyncio.CancelledError:
            print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
            raise
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
            import traceback
            print(f"Traceback: {traceback.format_exc()}")