import pytest
from unittest.mock import Mock, patch, AsyncMock
from aiogram.types import Message, User, ReplyKeyboardMarkup
from tg_bot.bot import cmd_start, subscribe_to_notifications, unsubscribe_from_notifications


class TestBotHandlers:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""

    @pytest.mark.asyncio
    async def test_cmd_start(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start"""
        message = Mock(spec=Message)
        message.answer = AsyncMock()
        
        await cmd_start(message)
        
        message.answer.assert_called_once()
        call_args = message.answer.call_args
        assert "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" in call_args[0][0]
        assert call_args[1]['reply_markup'] is not None

    @pytest.mark.asyncio
    async def test_subscribe_to_notifications(self):
        """–¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        message = Mock(spec=Message)
        message.from_user = Mock(spec=User)
        message.from_user.id = 123456789
        message.text = "üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        message.answer = AsyncMock()
        
        with patch('tg_bot.bot.subscribed_users', set()) as mock_subscribers:
            with patch('tg_bot.bot.save_subscribers') as mock_save:
                await subscribe_to_notifications(message)
                
                assert 123456789 in mock_subscribers
                mock_save.assert_called_once()
                message.answer.assert_called_once_with("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")

    @pytest.mark.asyncio
    async def test_subscribe_to_notifications_existing_user(self):
        """–¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message = Mock(spec=Message)
        message.from_user = Mock(spec=User)
        message.from_user.id = 123456789
        message.text = "üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        message.answer = AsyncMock()
        
        with patch('tg_bot.bot.subscribed_users', {123456789}) as mock_subscribers:
            with patch('tg_bot.bot.save_subscribers') as mock_save:
                await subscribe_to_notifications(message)
                
                assert 123456789 in mock_subscribers
                mock_save.assert_not_called()
                message.answer.assert_called_once_with("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")

    @pytest.mark.asyncio
    async def test_unsubscribe_from_notifications(self):
        """–¢–µ—Å—Ç –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        message = Mock(spec=Message)
        message.from_user = Mock(spec=User)
        message.from_user.id = 123456789
        message.text = "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        message.answer = AsyncMock()
        
        with patch('tg_bot.bot.subscribed_users', {123456789}) as mock_subscribers:
            with patch('tg_bot.bot.save_subscribers') as mock_save:
                await unsubscribe_from_notifications(message)
                
                assert 123456789 not in mock_subscribers
                mock_save.assert_called_once()
                message.answer.assert_called_once_with("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

    @pytest.mark.asyncio
    async def test_unsubscribe_from_notifications_non_existing_user(self):
        """–¢–µ—Å—Ç –æ—Ç–ø–∏—Å–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message = Mock(spec=Message)
        message.from_user = Mock(spec=User)
        message.from_user.id = 123456789
        message.text = "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        message.answer = AsyncMock()
        
        with patch('tg_bot.bot.subscribed_users', set()) as mock_subscribers:
            with patch('tg_bot.bot.save_subscribers') as mock_save:
                await unsubscribe_from_notifications(message)
                
                assert 123456789 not in mock_subscribers
                mock_save.assert_not_called()
                message.answer.assert_called_once_with("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.") 