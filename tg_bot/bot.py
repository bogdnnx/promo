# import asyncio
# import logging
# from aiogram import Bot, Dispatcher, types
# from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
# from aiogram.filters import Command
# from tg_bot.config import TELEGRAM_BOT_TOKEN
# from tg_bot.db_utils import get_all_subscribed_users
# from tg_bot.kafka_consumer import TelegramKafkaConsumer
# from tg_bot.keyboards.reply import get_main_keyboard
# import os
#
# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(level=logging.INFO)
#
# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# bot = Bot(token=TELEGRAM_BOT_TOKEN)
# dp = Dispatcher()
#
# # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# subscribed_users = set()
#
#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
# @dp.message(Command("start"))
# async def cmd_start(message: types.Message):
#     keyboard = get_main_keyboard()
#     await message.answer(
#         "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.\n"
#         "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
#         reply_markup=keyboard
#     )
#
#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
# @dp.message(lambda message: message.text == "üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
# async def subscribe_to_notifications(message: types.Message):
#     user_id = message.from_user.id
#     if user_id in subscribed_users:
#         await message.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
#     else:
#         subscribed_users.add(user_id)
#         await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
#
#
# # async def main():
# #     # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka consumer
# #     kafka_consumer = TelegramKafkaConsumer(subscribed_users)
# #
# #     # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
# #     polling_task = asyncio.create_task(dp.start_polling(bot))
# #     kafka_task = asyncio.create_task(kafka_consumer.process_messages())
# #
# #     try:
# #         # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
# #         await asyncio.gather(polling_task, kafka_task)
# #     except asyncio.CancelledError:
# #         # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á
# #         polling_task.cancel()
# #         kafka_task.cancel()
# #         await asyncio.gather(polling_task, kafka_task, return_exceptions=True)
# #     finally:
# #         # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
# #         await bot.session.close()
# #         kafka_consumer.consumer.close()
# #
# #
# # if __name__ == '__main__':
# #     try:
# #         asyncio.run(main())
# #     except KeyboardInterrupt:
# #         print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
#
#
# async def main():
#     # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#     subscribed_users = get_all_subscribed_users()
#     print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –ë–î: {len(subscribed_users)}")
#
#     # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka consumer
#     kafka_consumer = TelegramKafkaConsumer(subscribed_users)
#
#     # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
#     polling_task = asyncio.create_task(dp.start_polling(bot))
#     kafka_task = asyncio.create_task(kafka_consumer.process_messages())
#
#     try:
#         # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
#         await asyncio.gather(polling_task, kafka_task)
#     except asyncio.CancelledError:
#         # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á
#         polling_task.cancel()
#         kafka_task.cancel()
#         await asyncio.gather(polling_task, kafka_task, return_exceptions=True)
#     finally:
#         # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
#         await bot.session.close()
#         kafka_consumer.consumer.close()
#
#
# if __name__ == '__main__':
#     try:
#         asyncio.run(main())
#     except KeyboardInterrupt:
#         print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from tg_bot.config import TELEGRAM_BOT_TOKEN
from tg_bot.db_utils import get_all_subscribed_users
from tg_bot.kafka_consumer import TelegramKafkaConsumer
from tg_bot.keyboards.reply import get_main_keyboard
from dotenv import load_dotenv
import os
from tg_bot.db_utils import load_subscribers, save_subscribers, get_all_subscribed_users


SUBSCRIBERS_FILE = "subscribers.txt"


subscribed_users = load_subscribers()

load_dotenv()  # —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env –ø–æ–¥—Ö–≤–∞—Ç–∏–ª–∏—Å—å

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = get_main_keyboard()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.",
        reply_markup=keyboard
    )

# –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–≥–ª—É—à–∫–∏
@dp.message(lambda message: message.text == "üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def subscribe_to_notifications(message: types.Message):
    user_id = message.from_user.id
    if user_id in subscribed_users:
        await message.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
    else:
        subscribed_users.add(user_id)
        save_subscribers(subscribed_users)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")

@dp.message(lambda message: message.text == "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
async def unsubscribe_from_notifications(message: types.Message):
    user_id = message.from_user.id
    if user_id not in subscribed_users:
        await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    else:
        subscribed_users.remove(user_id)
        save_subscribers(subscribed_users)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")


async def main():
    subscribed_users = get_all_subscribed_users()
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ .env: {subscribed_users}")

    kafka_consumer = TelegramKafkaConsumer(subscribed_users)

    polling_task = asyncio.create_task(dp.start_polling(bot))
    kafka_task = asyncio.create_task(kafka_consumer.process_messages())

    try:
        await asyncio.gather(polling_task, kafka_task)
    except asyncio.CancelledError:
        polling_task.cancel()
        kafka_task.cancel()
        await asyncio.gather(polling_task, kafka_task, return_exceptions=True)
    finally:
        await bot.session.close()
        kafka_consumer.consumer.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")