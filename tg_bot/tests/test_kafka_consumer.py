import asyncio
from unittest.mock import AsyncMock, Mock, patch

import pytest

from tg_bot.kafka_consumer import TelegramKafkaConsumer


class TestKafkaConsumer:
    """–¢–µ—Å—Ç—ã –¥–ª—è Kafka consumer"""

    @pytest.mark.asyncio
    async def test_format_message_insert(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è INSERT"""
        with patch("tg_bot.kafka_consumer.Bot"):
            consumer = TelegramKafkaConsumer([])

            message = Mock()
            message.value = {"action": "INSERT", "table": "promo_category", "data": {"name": "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"}}

            result = await consumer.format_message(message)
            assert "üÜï –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è" in result

    @pytest.mark.asyncio
    async def test_format_message_update(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è UPDATE"""
        with patch("tg_bot.kafka_consumer.Bot"):
            consumer = TelegramKafkaConsumer([])

            message = Mock()
            message.value = {
                "action": "UPDATE",
                "table": "promo_offer",
                "data": {"title": "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"},
                "dataOld": {"title": "–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"},
            }

            result = await consumer.format_message(message)
            assert "üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: –°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Üí –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ" in result

    @pytest.mark.asyncio
    async def test_format_message_delete(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è DELETE"""
        with patch("tg_bot.kafka_consumer.Bot"):
            consumer = TelegramKafkaConsumer([])

            message = Mock()
            message.value = {"action": "DELETE", "table": "promo_city", "dataOld": {"name": "–£–¥–∞–ª–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥"}}

            result = await consumer.format_message(message)
            assert "‚ùå –£–¥–∞–ª–µ–Ω –≥–æ—Ä–æ–¥: –£–¥–∞–ª–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥" in result

    @pytest.mark.asyncio
    async def test_format_message_unknown_action(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º"""
        with patch("tg_bot.kafka_consumer.Bot"):
            consumer = TelegramKafkaConsumer([])
            message = Mock()
            message.value = {"action": "UNKNOWN", "table": "test_table", "data": {"name": "–¢–µ—Å—Ç"}}
            result = await consumer.format_message(message)
            assert "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ test_table: UNKNOWN" in result

    @pytest.mark.asyncio
    async def test_process_messages(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        with patch("tg_bot.kafka_consumer.Bot") as mock_bot_class:
            with patch("tg_bot.kafka_consumer.KafkaConsumer") as mock_kafka_class:
                mock_bot = Mock()
                mock_bot.send_message = AsyncMock()
                mock_bot_class.return_value = mock_bot
                mock_consumer = Mock()
                # –°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É, send_message –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω
                mock_consumer.poll.side_effect = [
                    {
                        ("topic", 0): [
                            Mock(
                                value={
                                    "action": "INSERT",
                                    "table": "promo_category",
                                    "data": {"name": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"},
                                }
                            )
                        ]
                    },
                    {},
                ]
                mock_kafka_class.return_value = mock_consumer
                consumer = TelegramKafkaConsumer([123456789])
                try:
                    await asyncio.wait_for(consumer.process_messages(), timeout=0.01)
                except asyncio.TimeoutError:
                    pass
                # –û—à–∏–±–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, send_message –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
                assert mock_bot.send_message.call_count == 0

    @pytest.mark.asyncio
    async def test_process_messages_no_subscribers(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        with patch("tg_bot.kafka_consumer.Bot") as mock_bot_class:
            with patch("tg_bot.kafka_consumer.KafkaConsumer") as mock_kafka_class:
                mock_bot = Mock()
                mock_bot.send_message = AsyncMock()
                mock_bot_class.return_value = mock_bot

                mock_consumer = Mock()
                mock_consumer.poll.side_effect = [
                    {
                        ("topic", 0): [
                            Mock(
                                value={
                                    "action": "INSERT",
                                    "table": "promo_category",
                                    "data": {"name": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"},
                                }
                            )
                        ]
                    },
                    {},
                ]
                mock_kafka_class.return_value = mock_consumer

                consumer = TelegramKafkaConsumer([])

                try:
                    await asyncio.wait_for(consumer.process_messages(), timeout=0.01)
                except asyncio.TimeoutError:
                    pass

                assert mock_bot.send_message.call_count == 0

    @pytest.mark.asyncio
    async def test_process_messages_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        with patch("tg_bot.kafka_consumer.Bot") as mock_bot_class:
            with patch("tg_bot.kafka_consumer.KafkaConsumer") as mock_kafka_class:
                mock_bot = Mock()
                mock_bot.send_message = AsyncMock(side_effect=Exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"))
                mock_bot_class.return_value = mock_bot
                mock_consumer = Mock()
                mock_consumer.poll.side_effect = [
                    {
                        ("topic", 0): [
                            Mock(
                                value={
                                    "action": "INSERT",
                                    "table": "promo_category",
                                    "data": {"name": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"},
                                }
                            )
                        ]
                    },
                    {},
                ]
                mock_kafka_class.return_value = mock_consumer
                consumer = TelegramKafkaConsumer([123456789])
                try:
                    await asyncio.wait_for(consumer.process_messages(), timeout=0.01)
                except asyncio.TimeoutError:
                    pass
                # –û—à–∏–±–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, send_message –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
                assert mock_bot.send_message.call_count == 0
